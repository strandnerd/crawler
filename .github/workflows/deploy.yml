name: Build and Deploy Crawler

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

  only-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t strandnerd-crawler:${{ github.sha }} .
          echo "âœ… Crawler Docker image built successfully"

      - name: Build Summary
        run: |
          echo "ðŸŽ‰ Build completed successfully for branch: ${{ github.ref_name }}"
          echo "ðŸ“¦ Image built: strandnerd-crawler:${{ github.sha }}"
          echo "âœ… Ready for merge to main branch"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/strandnerd-crawler:latest .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/strandnerd-crawler:latest

      - name: Deploy on VM via SSH
        env:
          VM_IP: ${{ secrets.VM_IP }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          echo "$VM_SSH_KEY" > key.pem
          chmod 600 key.pem
          
          # Copy docker-compose.prod.yml to VM as docker-compose.yml
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.prod.yml $VM_USER@$VM_IP:/home/strandnerd/crawler/docker-compose.yml
          
          # Deploy the crawler
          ssh -o StrictHostKeyChecking=no -i key.pem $VM_USER@$VM_IP "
            cd /home/strandnerd/crawler && 
            docker compose pull &&
            docker compose up -d --pull always && 
            
            # Wait for service to be ready
            echo \"Waiting for crawler service to be ready...\"
            sleep 10
            
            # Check service status
            docker compose ps
            
            # Verify crawler container is running
            max_attempts=30
            attempts=0
            
            while true; do
              container_status=\$(docker compose ps -q crawler | xargs docker inspect --format='{{.State.Status}}' 2>/dev/null || echo 'not_found')
              
              if [ \"\$container_status\" = \"running\" ]; then
                echo \"Crawler is running successfully\"
                break
              fi
              
              attempts=\$((attempts + 1))
              if [ \$attempts -ge \$max_attempts ]; then
                echo \"Error: Crawler failed to start after \$max_attempts attempts\"
                echo \"Container status: \$container_status\"
                docker compose logs crawler --tail=20
                exit 1
              fi
              
              echo \"Crawler status: \$container_status (attempt \$attempts/\$max_attempts)\"
              sleep 5
            done
            
            echo \"Deployment completed successfully\"
            docker compose logs crawler --tail=10
          "